generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id    Int    @id(map: "user_profile_pk") @default(autoincrement())
  users User[]

  @@map("user_profile")
}

model User {
  id              Int         @id(map: "users_pk") @default(autoincrement())
  userName        String      @unique @map("user_name")
  emailAddress    String      @unique @map("email_address")
  userPassword    String      @map("user_password")
  availableTokens Int         @default(5) @map("available_tokens")
  role            Role        @default(USER) @map("role")
  profileId       Int         @default(autoincrement()) @map("profile_id")
  createdAt      DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?   @default(now()) @db.Timestamptz(6)
  isdeleted      Boolean     @default(false)
  orcs            Orc[]       @relation("UserOrcs")
  profile         UserProfile @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_profile_fk")

  @@map("users")
}

model OrcHead {
  id         Int        @id(map: "orc_head_images_pk") @default(autoincrement())
  url        String
  createdAt DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?  @default(now()) @db.Timestamptz(6)
  isDeleted Boolean    @default(false)
  orc_images OrcImage[]

  @@map("orc_head")
}

model OrcTorso {
  id         Int        @id(map: "orc_torso_images_pk") @default(autoincrement())
  url        String
  createdAt      DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?   @default(now()) @db.Timestamptz(6)
  isDeleted      Boolean     @default(false)
  orc_images OrcImage[]

  @@map("orc_torso")
}

model OrcLegs {
  id         Int        @id(map: "orc_legs_images_pk") @default(autoincrement())
  url        String
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @default(now()) @db.Timestamptz(6)
  is_deleted Boolean    @default(false)
  orc_images OrcImage[]

  @@map("orc_legs")
}

model OrcImage {
  id        Int       @id(map: "orc_images_pk") @default(autoincrement())
  head      Int?
  body      Int?
  legs      Int?
  orc_torso OrcTorso? @relation(fields: [body], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "body_image_fk")
  orc_head  OrcHead?  @relation(fields: [head], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "head_image_fk")
  orc_legs  OrcLegs?  @relation(fields: [legs], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "legs_image_fk")
  orcs      Orc[]

  @@map("orc_images")
}

model Prompts {
  id                                                     Int                @id(map: "prompts_pk") @default(autoincrement())
  content                                                String
  createdAt      DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?   @default(now()) @db.Timestamptz(6)
  isDeleted      Boolean     @default(false)
  prompts_collection_prompts_collection_prompt1Toprompts PromptsCollection[] @relation("prompts_collection_prompt1Toprompts")
  prompts_collection_prompts_collection_prompt2Toprompts PromptsCollection[] @relation("prompts_collection_prompt2Toprompts")
  prompts_collection_prompts_collection_prompt3Toprompts PromptsCollection[] @relation("prompts_collection_prompt3Toprompts")

  @@map("prompts")
}

model PromptsCollection {
  id                                          Int     @id(map: "prompts_collection_pk") @default(autoincrement())
  prompt1                                     Int?
  prompt2                                     Int?
  prompt3                                     Int?
  orcs                                        Orc[]
  prompts_prompts_collection_prompt1Toprompts Prompts? @relation("prompts_collection_prompt1Toprompts", fields: [prompt1], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prompt1_id_fk")
  prompts_prompts_collection_prompt2Toprompts Prompts? @relation("prompts_collection_prompt2Toprompts", fields: [prompt2], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prompt2_id_fk")
  prompts_prompts_collection_prompt3Toprompts Prompts? @relation("prompts_collection_prompt3Toprompts", fields: [prompt3], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prompt3_id_fk")

  @@map("prompts_collection")
}

model Orc {
  id                  Int              @id(map: "orcs_pk") @default(autoincrement())
  name                String
  description         String
  promptsCollectionId Int              @default(autoincrement()) @map("prompts_collection_id")
  orcImagesId         Int              @default(autoincrement()) @map("orc_images_id")
  userId              Int              @default(autoincrement()) @map("user_id")
  createdAt      DateTime?   @default(now()) @db.Timestamptz(6)
  isDeleted      Boolean     @default(false)
  orcImages           OrcImage         @relation(fields: [orcImagesId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orc_images_id_fk")
  promptsCollection   PromptsCollection @relation(fields: [promptsCollectionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prompts_collection_id_fk")
  user                User             @relation("UserOrcs", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fk")

  @@map("orcs")
}

model Catalogue {
  id         Int       @id(map: "catalogue_pk") @default(autoincrement())
  syllables  String
  createdAt      DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?   @default(now()) @db.Timestamptz(6)
  isDeleted      Boolean     @default(false)

  @@map("catalogue")
}

model BackgroundImages {
  id         Int       @id(map: "background_images_pk") @default(autoincrement())
  image_name String
  url        String
  createdAt      DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?   @default(now()) @db.Timestamptz(6)
  isDeleted      Boolean     @default(false)
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

enum Role {
  USER
  VALIDUSER
  ADMIN
  DELETED

  @@map("role")
}
